on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: CI

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
        with:
          # By default actions/checkout checks out a merge commit. This makes no sense whatsoever.
          # https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Lint (clippy)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets
      - name: Lint (rustfmt)
        uses: actions-rs/cargo@v1
        with:
          command: xfmt
          args: --check
      - name: Install cargo readme
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-readme
          version: latest
          use-tool-cache: true
      - name: Run cargo readme
        run: ./scripts/regenerate-readmes.sh
      - name: Check for differences
        run: git diff --exit-code

  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        # 1.51 is the MSRV
        rust-version: [ 1.51, stable ]
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          override: true

      # Build all packages we care about one by one to ensure feature unification
      # doesn't happen.
      # Build all targets to ensure examples are built as well.
      - name: Build target-spec
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package target-spec
      - name: Build guppy
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package guppy
      - name: Build determinator
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package determinator
      - name: Build cargo-guppy
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package cargo-guppy
      - name: Build hakari
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package hakari
      - name: Test target-spec
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --package target-spec
      - name: Test guppy
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --package guppy
      - name: Test determinator
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --package determinator
      - name: Test cargo-guppy
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --package cargo-guppy
      - name: Test hakari
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --package hakari

  build-all-features:
    name: Build and test (all features)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        # 1.51 is the MSRV
        rust-version: [ 1.51, stable ]
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          # Build all targets to ensure examples are built as well.
          command: build
          args: --all-targets --all-features
      - name: Run doctests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc --all-features
      - name: Run all other tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --all-features

  test-extended:
    name: cargo-compare extended tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Don't run cargo-compare tests on Windows for now. See
        # https://github.com/facebookincubator/cargo-guppy/issues/265.
        os: [ ubuntu-latest, macos-latest ]
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
      PROPTEST_MULTIPLIER: 64
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build and test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --package cargo-compare --release

  aarch64-build:
    runs-on: ubuntu-18.04
    name: Cross-compile to aarch64
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          # * Exclude cargo-compare because it depends on cargo, which in turn
          #   depends on openssl, and getting *that* to cross-compile is a
          #   headache.
          # * Build all targets to ensure examples are built as well.
          args: --target aarch64-unknown-linux-gnu --workspace --exclude cargo-compare --all-targets
      # TODO: run tests somehow? possibly through cross/qemu
