on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: CI

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c
      - name: Lint (clippy)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets
      - name: Lint (rustfmt)
        uses: actions-rs/cargo@v1
        with:
          command: xfmt
          args: --check
      - name: Install cargo readme
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-readme
      - name: Run cargo readme
        run: ./scripts/regenerate-readmes.sh
      - name: Check for differences
        run: git diff --exit-code

  build:
    name: Build and test core crates
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        rust-version: [ 1.56, stable ]
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          override: true
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c

      # Build all packages we care about one by one to ensure feature unification
      # doesn't happen.
      # Build all targets to ensure examples are built as well.
      - name: Build target-spec
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package target-spec
      - name: Build guppy-summaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package guppy-summaries
      - name: Build guppy
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package guppy
      - name: Build determinator
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package determinator
      - name: Build hakari
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --package hakari
      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Run tests for core crates
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run --package target-spec --package guppy-summaries --package guppy --package determinator --package hakari

  build-all-features:
    name: Build and test (all features)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        rust-version: [ 1.56, stable ]
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          override: true
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: test
          # Build all targets to ensure examples are built as well.
          # Exclude cargo-compare so that it only runs on the cfg-expr version below.
          args: --all-targets --no-run --all-features --workspace --exclude cargo-compare
      - name: Run doctests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc --all-features --workspace --exclude cargo-compare
      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Run all other tests
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          # Exclude cargo-compare so that it only runs on the cfg-expr version below.
          args: run --all-features --workspace --exclude cargo-compare

  build-rustdoc:
    name: Build documentation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
      fail-fast: false
    env:
      RUSTDOCFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c
      - name: Build rustdoc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          # cargo-compare currently pulls in cargo which bloats build times massively
          args: --all-features --workspace --exclude cargo-compare

  test-extended:
    name: cargo-compare extended tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Don't run cargo-compare tests on Windows for now. See
        # https://github.com/facebookincubator/cargo-guppy/issues/265.
        os: [ ubuntu-latest, macos-latest ]
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
      PROPTEST_MULTIPLIER: 64
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          # 1.60 is the cfg-expr version
          toolchain: 1.60.0
          override: true
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c
      - name: Build and test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --package cargo-compare --release

  aarch64-build:
    runs-on: ubuntu-18.04
    name: Cross-compile to aarch64
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          # * Exclude cargo-compare because it depends on cargo, which in turn
          #   depends on openssl, and getting *that* to cross-compile is a
          #   headache.
          # * Build all targets to ensure examples are built as well.
          args: --target aarch64-unknown-linux-gnu --workspace --exclude cargo-compare --all-targets
      # TODO: run tests somehow? possibly through cross/qemu
