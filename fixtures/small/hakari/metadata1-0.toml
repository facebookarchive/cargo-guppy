# This file is @generated. To regenerate, run:
#    cargo run -p fixture-manager -- generate-hakari --fixture metadata1

### BEGIN HAKARI SECTION
# resolver = '2'
# unify-target-host = 'replicate-target-as-host'
# unify-all = true
# platforms = ['thumbv7m-none-eabi', 'mips64-unknown-linux-gnuabi64', 'riscv32imac-unknown-none-elf']
# [[traversal-excludes.ids]]
# name = 'bitflags'
# version = '1.1.0'
# crates-io = true
#
# [[traversal-excludes.ids]]
# name = 'ctor'
# version = '0.1.10'
# crates-io = true
#
# [[traversal-excludes.ids]]
# name = 'libc'
# version = '0.2.62'
# crates-io = true
#
# [[traversal-excludes.ids]]
# name = 'walkdir'
# version = '2.2.9'
# source = 'git+https://github.com/BurntSushi/walkdir?tag=2.2.9#7c7013259eb9db400b3e5c7bc60330ca08068826'
#
# [[traversal-excludes.ids]]
# name = 'winapi'
# version = '0.3.8'
# crates-io = true
# [[final-excludes.ids]]
# name = 'aho-corasick'
# version = '0.7.6'
# crates-io = true
#
# [[final-excludes.ids]]
# name = 'region'
# version = '2.1.2'
# crates-io = true
#
# [[final-excludes.ids]]
# name = 'version_check'
# version = '0.9.1'
# crates-io = true

[dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
thread_local = { version = "0.3", default-features = false, features = [] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[build-dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
datatest-derive = { version = "0.4", default-features = false, features = [] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
proc-macro2 = { version = "1", features = ["default", "proc-macro"] }
quote = { path = "/fakepath/testcrate/../quote", features = ["default", "proc-macro"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
syn = { version = "1", features = ["clone-impls", "default", "derive", "full", "parsing", "printing", "proc-macro", "quote"] }
thread_local = { version = "0.3", default-features = false, features = [] }
unicode-xid = { version = "0.2", features = ["default"] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[target.thumbv7m-none-eabi.dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
thread_local = { version = "0.3", default-features = false, features = [] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[target.thumbv7m-none-eabi.build-dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
datatest-derive = { version = "0.4", default-features = false, features = [] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
proc-macro2 = { version = "1", features = ["default", "proc-macro"] }
quote = { path = "/fakepath/testcrate/../quote", features = ["default", "proc-macro"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
syn = { version = "1", features = ["clone-impls", "default", "derive", "full", "parsing", "printing", "proc-macro", "quote"] }
thread_local = { version = "0.3", default-features = false, features = [] }
unicode-xid = { version = "0.2", features = ["default"] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[target.mips64-unknown-linux-gnuabi64.dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
thread_local = { version = "0.3", default-features = false, features = [] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[target.mips64-unknown-linux-gnuabi64.build-dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
datatest-derive = { version = "0.4", default-features = false, features = [] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
proc-macro2 = { version = "1", features = ["default", "proc-macro"] }
quote = { path = "/fakepath/testcrate/../quote", features = ["default", "proc-macro"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
syn = { version = "1", features = ["clone-impls", "default", "derive", "full", "parsing", "printing", "proc-macro", "quote"] }
thread_local = { version = "0.3", default-features = false, features = [] }
unicode-xid = { version = "0.2", features = ["default"] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[target.riscv32imac-unknown-none-elf.dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
thread_local = { version = "0.3", default-features = false, features = [] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

[target.riscv32imac-unknown-none-elf.build-dependencies]
datatest = { version = "0.4", features = ["default", "region", "unsafe_test_runner"] }
datatest-derive = { version = "0.4", default-features = false, features = [] }
dtoa = { version = "0.4", default-features = false, features = [] }
lazy_static = { version = "1", default-features = false, features = [] }
linked-hash-map = { version = "0.5", default-features = false, features = [] }
memchr = { version = "2", features = ["default", "use_std"] }
proc-macro2 = { version = "1", features = ["default", "proc-macro"] }
quote = { path = "/fakepath/testcrate/../quote", features = ["default", "proc-macro"] }
regex = { version = "1", features = ["aho-corasick", "default", "memchr", "perf", "perf-cache", "perf-dfa", "perf-inline", "perf-literal", "std", "thread_local", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
regex-syntax = { version = "0.6", default-features = false, features = ["unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"] }
serde = { version = "1", features = ["default", "std"] }
serde_yaml = { version = "0.8", default-features = false, features = [] }
syn = { version = "1", features = ["clone-impls", "default", "derive", "full", "parsing", "printing", "proc-macro", "quote"] }
thread_local = { version = "0.3", default-features = false, features = [] }
unicode-xid = { version = "0.2", features = ["default"] }
yaml-rust = { version = "0.4", default-features = false, features = [] }

### END HAKARI SECTION

# This part of the file should be preserved at the end.
